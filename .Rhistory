# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
####################^^^^^^^^^^^^^^^^^^ NOT MINE  ^^^^^^^^^^^^^^^##############################
result <- forest_avg_max_subtree(rg.veteran)
plot_so_vs_fo_min_depth(result)
so_vs_fo_with_weak_var_prob(result, rg.veteran)
#base_plotting(result, rg.veteran)
library(ggplot2)
# plot Second Order vs First Order, minimal maximal subtree depth
plot_so_vs_fo_min_depth <- function(eval_data){
avg_fo_depth <- median(eval_data$first_order)
so_vs_fo <- ggplot(eval_data, aes(x = first_order, y = second_order)) +
geom_point() +
geom_text(aes(label=variable_name),hjust=0, vjust=0) +
geom_vline(aes(xintercept = avg_fo_depth), linetype="dashed") +
xlab("First Order Depth") +
ylab("Second Order Depth")
return(so_vs_fo)
}
base_plotting <- function(eval_data, ranger_result){
avg_fo_depth <- median(eval_data$first_order)
plot(eval_data$second_order ~ eval_data$first_order,
xlab = "First Order Depth",
ylab = "Second Order Depth",
data = eval_data[,1:2])
with(eval_data[,1:2],
text(eval_data$second_order ~ eval_data$first_order,
labels = eval_data[[3]],
pos = 4))
}
so_vs_fo_with_weak_var_prob <- function(eval_data, ranger_result){
so_vs_fo <- plot_so_vs_fo_min_depth(eval_data)
print(weak_prob_at_depth(ranger_result))
cum_plot <- ggplot(data = weak_prob_at_depth(ranger_result), aes(x = depths, y = cumsum)) +
geom_point()
prob_plot <- ggplot(data = weak_prob_at_depth(ranger_result), aes(x = depths, y = probs)) +
geom_point()
result <- multiplot(so_vs_fo, cum_plot, prob_plot, cols = 1)
ggsave(filename = "out/so_vs_fo_w_weak_cdf_test.png", plot =result)
return(result)
}
#################### NOT MINE ##############################
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
####################^^^^^^^^^^^^^^^^^^ NOT MINE  ^^^^^^^^^^^^^^^##############################
result <- forest_avg_max_subtree(rg.veteran)
plot_so_vs_fo_min_depth(result)
so_vs_fo_with_weak_var_prob(result, rg.veteran)
#base_plotting(result, rg.veteran)
library(ggplot2)
# plot Second Order vs First Order, minimal maximal subtree depth
plot_so_vs_fo_min_depth <- function(eval_data){
avg_fo_depth <- median(eval_data$first_order)
so_vs_fo <- ggplot(eval_data, aes(x = first_order, y = second_order)) +
geom_point() +
geom_text(aes(label=variable_name),hjust=0, vjust=0) +
geom_vline(aes(xintercept = avg_fo_depth), linetype="dashed") +
xlab("First Order Depth") +
ylab("Second Order Depth")
return(so_vs_fo)
}
base_plotting <- function(eval_data, ranger_result){
avg_fo_depth <- median(eval_data$first_order)
plot(eval_data$second_order ~ eval_data$first_order,
xlab = "First Order Depth",
ylab = "Second Order Depth",
data = eval_data[,1:2])
with(eval_data[,1:2],
text(eval_data$second_order ~ eval_data$first_order,
labels = eval_data[[3]],
pos = 4))
}
so_vs_fo_with_weak_var_prob <- function(eval_data, ranger_result){
so_vs_fo <- plot_so_vs_fo_min_depth(eval_data)
print(weak_prob_at_depth(ranger_result))
cum_plot <- ggplot(data = weak_prob_at_depth(ranger_result), aes(x = depths, y = cumsum)) +
geom_point()
prob_plot <- ggplot(data = weak_prob_at_depth(ranger_result), aes(x = depths, y = probs)) +
geom_point()
result <- multiplot(so_vs_fo, cum_plot, prob_plot, cols = 1)
print(result)
ggsave(filename = "out/so_vs_fo_w_weak_cdf_test.png", plot =result)
return(result)
}
#################### NOT MINE ##############################
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
####################^^^^^^^^^^^^^^^^^^ NOT MINE  ^^^^^^^^^^^^^^^##############################
result <- forest_avg_max_subtree(rg.veteran)
plot_so_vs_fo_min_depth(result)
so_vs_fo_with_weak_var_prob(result, rg.veteran)
#base_plotting(result, rg.veteran)
library(ggplot2)
# plot Second Order vs First Order, minimal maximal subtree depth
plot_so_vs_fo_min_depth <- function(eval_data){
avg_fo_depth <- median(eval_data$first_order)
so_vs_fo <- ggplot(eval_data, aes(x = first_order, y = second_order)) +
geom_point() +
geom_text(aes(label=variable_name),hjust=0, vjust=0) +
geom_vline(aes(xintercept = avg_fo_depth), linetype="dashed") +
xlab("First Order Depth") +
ylab("Second Order Depth")
return(so_vs_fo)
}
base_plotting <- function(eval_data, ranger_result){
avg_fo_depth <- median(eval_data$first_order)
plot(eval_data$second_order ~ eval_data$first_order,
xlab = "First Order Depth",
ylab = "Second Order Depth",
data = eval_data[,1:2])
with(eval_data[,1:2],
text(eval_data$second_order ~ eval_data$first_order,
labels = eval_data[[3]],
pos = 4))
}
so_vs_fo_with_weak_var_prob <- function(eval_data, ranger_result){
so_vs_fo <- plot_so_vs_fo_min_depth(eval_data)
print(weak_prob_at_depth(ranger_result))
cum_plot <- ggplot(data = weak_prob_at_depth(ranger_result), aes(x = depths, y = cumsum)) +
geom_point()
prob_plot <- ggplot(data = weak_prob_at_depth(ranger_result), aes(x = depths, y = probs)) +
geom_point()
result <- multiplot(so_vs_fo, cum_plot, prob_plot, cols = 1)
print(result)
#ggsave(filename = "out/so_vs_fo_w_weak_cdf_test.png", plot =result)
return(result)
}
#################### NOT MINE ##############################
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
####################^^^^^^^^^^^^^^^^^^ NOT MINE  ^^^^^^^^^^^^^^^##############################
result <- forest_avg_max_subtree(rg.veteran)
plot_so_vs_fo_min_depth(result)
so_vs_fo_with_weak_var_prob(result, rg.veteran)
#base_plotting(result, rg.veteran)
library(ggplot2)
# plot Second Order vs First Order, minimal maximal subtree depth
plot_so_vs_fo_min_depth <- function(eval_data){
avg_fo_depth <- median(eval_data$first_order)
so_vs_fo <- ggplot(eval_data, aes(x = first_order, y = second_order)) +
geom_point() +
geom_text(aes(label=variable_name),hjust=0, vjust=0) +
geom_vline(aes(xintercept = avg_fo_depth), linetype="dashed") +
xlab("First Order Depth") +
ylab("Second Order Depth")
return(so_vs_fo)
}
base_plotting <- function(eval_data, ranger_result){
avg_fo_depth <- median(eval_data$first_order)
plot(eval_data$second_order ~ eval_data$first_order,
xlab = "First Order Depth",
ylab = "Second Order Depth",
data = eval_data[,1:2])
with(eval_data[,1:2],
text(eval_data$second_order ~ eval_data$first_order,
labels = eval_data[[3]],
pos = 4))
}
so_vs_fo_with_weak_var_prob <- function(eval_data, ranger_result){
so_vs_fo <- plot_so_vs_fo_min_depth(eval_data)
print(weak_prob_at_depth(ranger_result))
cum_plot <- ggplot(data = weak_prob_at_depth(ranger_result), aes(x = depths, y = cumsum)) +
geom_point()
prob_plot <- ggplot(data = weak_prob_at_depth(ranger_result), aes(x = depths, y = probs)) +
geom_point()
result <- multiplot(so_vs_fo, cum_plot, prob_plot, cols = 1)
print(result)
#ggsave(filename = "out/so_vs_fo_w_weak_cdf_test.png", plot =result)
return(result)
}
#################### NOT MINE ##############################
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
####################^^^^^^^^^^^^^^^^^^ NOT MINE  ^^^^^^^^^^^^^^^##############################
result <- forest_avg_max_subtree(rg.veteran)
plot_so_vs_fo_min_depth(result)
so_vs_fo_with_weak_var_prob(result, rg.veteran)
#base_plotting(result, rg.veteran)
library(ggplot2)
# plot Second Order vs First Order, minimal maximal subtree depth
plot_so_vs_fo_min_depth <- function(eval_data){
avg_fo_depth <- median(eval_data$first_order)
so_vs_fo <- ggplot(eval_data, aes(x = first_order, y = second_order)) +
geom_point() +
geom_text(aes(label=variable_name),hjust=0, vjust=0) +
geom_vline(aes(xintercept = avg_fo_depth), linetype="dashed") +
xlab("First Order Depth") +
ylab("Second Order Depth")
return(so_vs_fo)
}
base_plotting <- function(eval_data, ranger_result){
avg_fo_depth <- median(eval_data$first_order)
plot(eval_data$second_order ~ eval_data$first_order,
xlab = "First Order Depth",
ylab = "Second Order Depth",
data = eval_data[,1:2])
with(eval_data[,1:2],
text(eval_data$second_order ~ eval_data$first_order,
labels = eval_data[[3]],
pos = 4))
}
so_vs_fo_with_weak_var_prob <- function(eval_data, ranger_result){
so_vs_fo <- plot_so_vs_fo_min_depth(eval_data)
print(weak_prob_at_depth(ranger_result))
cum_plot <- ggplot(data = weak_prob_at_depth(ranger_result), aes(x = depths, y = cumsum)) +
geom_point()
prob_plot <- ggplot(data = weak_prob_at_depth(ranger_result), aes(x = depths, y = probs)) +
geom_point()
result <- multiplot(so_vs_fo, cum_plot, prob_plot, cols = 1)
print(result)
#ggsave(filename = "out/so_vs_fo_w_weak_cdf_test.png", plot =result)
return(result)
}
#################### NOT MINE ##############################
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
####################^^^^^^^^^^^^^^^^^^ NOT MINE  ^^^^^^^^^^^^^^^##############################
result <- forest_avg_max_subtree(rg.veteran)
plot_so_vs_fo_min_depth(result)
so_vs_fo_with_weak_var_prob(result, rg.veteran)
#base_plotting(result, rg.veteran)
library(ggplot2)
# plot Second Order vs First Order, minimal maximal subtree depth
plot_so_vs_fo_min_depth <- function(eval_data){
avg_fo_depth <- median(eval_data$first_order)
so_vs_fo <- ggplot(eval_data, aes(x = first_order, y = second_order)) +
geom_point() +
geom_text(aes(label=variable_name),hjust=0, vjust=0) +
geom_vline(aes(xintercept = avg_fo_depth), linetype="dashed") +
xlab("First Order Depth") +
ylab("Second Order Depth")
return(so_vs_fo)
}
base_plotting <- function(eval_data, ranger_result){
avg_fo_depth <- median(eval_data$first_order)
plot(eval_data$second_order ~ eval_data$first_order,
xlab = "First Order Depth",
ylab = "Second Order Depth",
data = eval_data[,1:2])
with(eval_data[,1:2],
text(eval_data$second_order ~ eval_data$first_order,
labels = eval_data[[3]],
pos = 4))
}
so_vs_fo_with_weak_var_prob <- function(eval_data, ranger_result){
so_vs_fo <- plot_so_vs_fo_min_depth(eval_data)
print(weak_prob_at_depth(ranger_result))
cum_plot <- ggplot(data = weak_prob_at_depth(ranger_result), aes(x = depths, y = cumsum)) +
geom_point()
prob_plot <- ggplot(data = weak_prob_at_depth(ranger_result), aes(x = depths, y = probs)) +
geom_point()
#result <- multiplot(so_vs_fo, cum_plot, prob_plot, cols = 1)
result = prob_plot
#ggsave(filename = "out/so_vs_fo_w_weak_cdf_test.png", plot =result)
return(result)
}
#################### NOT MINE ##############################
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
####################^^^^^^^^^^^^^^^^^^ NOT MINE  ^^^^^^^^^^^^^^^##############################
result <- forest_avg_max_subtree(rg.veteran)
plot_so_vs_fo_min_depth(result)
so_vs_fo_with_weak_var_prob(result, rg.veteran)
#base_plotting(result, rg.veteran)
